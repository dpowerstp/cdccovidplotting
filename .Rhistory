usethis::use_mit_license()
usethis::use_package("dplyr")
usethis::use_package("plotly")
usethis::use_package("magrittr")
usethis::use_package("purrr")
chng_vals <- function(df, colname, chngstr, .countycol = county, .dateformat = date_updated){
sortdf <- df %>%
dplyr::ungroup() %>%
dplyr::group_by({{.countycol}}) %>%
dplyr::arrange(date_updated)
if (length(chngstr) == 1){
pct_chng <- paste0(chngstr, "_pct")
outdf <- sortdf %>%
dplyr::mutate(!!dplyr::sym(chngstr) := {{colname}} - lag({{colname}}),
!!dplyr::sym(pct_chng) := round(!!dplyr::sym(chngstr) * 100 / lag({{colname}}), 2))
}
else if(length(chngstr) > 1){
outdf <- sortdf
purrr::walk2(colname, chngstr, ~{
pct_chng <- paste0(.y, "_pct")
outdf <<- outdf  %>%
dplyr::mutate(!!dplyr::sym(.y) := {{.x}} - lag({{.x}}),
!!dplyr::sym(pct_chng) := round(!!dplyr::sym(.y) * 100 / lag({{.x}}), 2))
})
}
outdf
}
read_county_commlevels <- function(statename){
read.csv(paste0("https://data.cdc.gov/resource/3nnm-4jni.csv?state=", statename))
}
df <- cdccovidplotting::read_county_commlevels("Maryland")
df <- read_county_commlevels("Maryland")
format_date <- function(df, datecol = date_updated){
df %>%
dplyr::mutate(date_updated := as.Date({{datecol}}),
date_format = format(date_updated, "%B %d, %Y"),
date_updated = format(date_updated, "%m-%d"))
}
df <- read_county_commlevels("Maryland") %>%
format_date()
library(tidyverse)
df <- read_county_commlevels("Maryland") %>%
format_date()
df %>% chng_vals(colname = covid_cases_per_100k, "cases")
df <- df %>% chng_vals(colname = covid_cases_per_100k, "cases")
View(df)
View(df)
df <- df %>% chng_vals(colname = c(covid_cases_per_100k, covid_hospital_admissions_per_100k ), c("cases", "hospadmit"))
df <- df %>% chng_vals(colname = c(covid_cases_per_100k, covid_hospital_admissions_per_100k), c("cases", "hospadmit"))
chng_vals <- function(df, colname, chngstr, .countycol = county, .dateformat = date_updated){
sortdf <- df %>%
dplyr::ungroup() %>%
dplyr::group_by({{.countycol}}) %>%
dplyr::arrange(date_updated)
if (length(chngstr) == 1){
pct_chng <- paste0(chngstr, "_pct")
outdf <- sortdf %>%
dplyr::mutate(!!dplyr::sym(chngstr) := {{colname}} - lag({{colname}}),
!!dplyr::sym(pct_chng) := round(!!dplyr::sym(chngstr) * 100 / lag({{colname}}), 2))
}
else if(length(chngstr) > 1){
outdf <- sortdf
purrr::walk2({{colname}}, chngstr, ~{
pct_chng <- paste0(.y, "_pct")
outdf <<- outdf  %>%
dplyr::mutate(!!dplyr::sym(.y) := {{.x}} - lag({{.x}}),
!!dplyr::sym(pct_chng) := round(!!dplyr::sym(.y) * 100 / lag({{.x}}), 2))
})
}
outdf
}
df <- df %>% chng_vals(colname = c(covid_cases_per_100k, covid_hospital_admissions_per_100k), c("cases", "hospadmit"))
df <- df %>% chng_vals(colname = 'covid_cases_per_100k', "cases")
df <- df %>% chng_vals(colname = c("covid_cases_per_100k", "covid_hospital_admissions_per_100k"), c("cases", "hospadmit"))
chng_vals <- function(df, colname, chngstr, .countycol = county, .dateformat = date_updated){
sortdf <- df %>%
dplyr::ungroup() %>%
dplyr::group_by({{.countycol}}) %>%
dplyr::arrange(date_updated)
if (length(chngstr) == 1){
pct_chng <- paste0(chngstr, "_pct")
outdf <- sortdf %>%
dplyr::mutate(!!dplyr::sym(chngstr) := !!dplyr::sym(colname) - lag(!!dplyr::sym(colname)),
!!dplyr::sym(pct_chng) := round(!!dplyr::sym(chngstr) * 100 / lag(!!dplyr::sym(colname)), 2))
}
else if(length(chngstr) > 1){
outdf <- sortdf
purrr::walk2(colname, chngstr, ~{
pct_chng <- paste0(.y, "_pct")
outdf <<- outdf  %>%
dplyr::mutate(!!dplyr::sym(.y) := !!dplyr::sym(.x) - lag(!!dplyr::sym(.x)),
!!dplyr::sym(pct_chng) := round(!!dplyr::sym(.y) * 100 / lag(!!dplyr::sym(.x)), 2))
})
}
outdf
}
df <- df %>% chng_vals(colname = 'covid_cases_per_100k', "cases")
df <- df %>% chng_vals(colname = c("covid_cases_per_100k", "covid_hospital_admissions_per_100k"), c("cases", "hospadmit"))
View(df)
usethis::use_package("plotly")
usethis::use_package("glue")
usethis::use_package("plotylwrappers")
usethis::use_package("plotlywrappers")
df <- read_county_commlevels("Maryland")
df
df$county
df_county <- df %>%
dplyr::filter(county == "Allegany County")
plot_commlevels <- function(countydf, vareval, varstring, subtitle, basechng){
basepct <- paste0(basechng, "_pct")
returnplot <- plotly::plot_ly(countydf %>%
arrange(date_updated),
x = ~ date_updated,
y = vareval,
text = ~ glue::glue(paste0("Change since last week: {", basechng, " %>% commafy}
Percent change since last week: {", basepct, " %>% commafy}%")),
showlegend = F,
type = "scatter",
mode = "line+marker")
maxval <- dplyr::case_when(varstring == "covid_cases_per_100k" ~ 250,
varstring == "covid_hospital_admissions_per_100k" ~ 25,
varstring == "covid_inpatient_bed_utilization" ~ 20)
if (max(countydf[[varstring]]) < maxval){
returnplot <- returnplot %>%
plotly::layout(xaxis = list(title = "Date"),
yaxis = list(title = "",
tickvals = seq(0, maxval, maxval / 5),
range = c(0, maxval)),
title = "")
}
else {
returnplot <- returnplot %>%
plotly::layout(xaxis = list(title = "Date"),
yaxis = list(title = ""),
title = "")
}
returnplot %>%
plotlywrappers::subplot_title(subtitle)
}
quote(~ covid_hospital_admissions_per_100k)
as.character(quote(~ covid_hospital_admissions_per_100k))
quotest <- function(uneval){
a <- quote(uneval)
as.character(a)
}
quotest(~as)
quotest <- function(uneval){
a <- quote(!!uneval)
as.character(a)
}
quotest(~as)
quotest <- function(uneval){
a <- quo(!!uneval)
as.character(a)
}
quotest(~as)
quotest <- function(uneval){
a <- quo(!!uneval)
as_label(a)
}
quotest(~as)
quotest(~ as)
plot_commlevels <- function(countydf, vareval, subtitle, basechng){
# extract string version of variable from vareval
varstring <- gsub("~", "", dplyr::as_label(dplyr::quo(!!vareval)))
basepct <- paste0(basechng, "_pct")
returnplot <- plotly::plot_ly(countydf %>%
arrange(date_updated),
x = ~ date_updated,
y = vareval,
text = ~ glue::glue(paste0("Change since last week: {", basechng, " %>% commafy}
Percent change since last week: {", basepct, " %>% commafy}%")),
showlegend = F,
type = "scatter",
mode = "line+marker")
maxval <- dplyr::case_when(varstring == "covid_cases_per_100k" ~ 250,
varstring == "covid_hospital_admissions_per_100k" ~ 25,
varstring == "covid_inpatient_bed_utilization" ~ 20)
if (max(countydf[[varstring]]) < maxval){
returnplot <- returnplot %>%
plotly::layout(xaxis = list(title = "Date"),
yaxis = list(title = "",
tickvals = seq(0, maxval, maxval / 5),
range = c(0, maxval)),
title = "")
}
else {
returnplot <- returnplot %>%
plotly::layout(xaxis = list(title = "Date"),
yaxis = list(title = ""),
title = "")
}
returnplot %>%
plotlywrappers::subplot_title(subtitle)
}
plot_commlevels_lines <- function(countydf, vareval, subtitle, basechng, countyfilt = NULL, .covidvar = covid_cases_per_100k, .countycol = county){
if (!is.null(countyfilt)){
countydf <- countydf %>%
dplyr::filter(grepl(countyfilt, {{.countycol}}, ignore.case = T))
}
if (nrow(countydf) == 0 | length(pull(countydf, {{.countycol}}) %>% unique()) != 1){
stop("More or less than 1 county column present in countydf after countyfilt applied")
}
cdccovidplotting::plot_commlevels(countydf = countydf, vareval = vareval, subtitle = subtitle, basechng = basechng) %>%
cdccovidplotting::lines_approp(varstring = gsub("~", "", dplyr::as_label(dplyr::quo(!!vareval))), countydf = countydf, .covidvar = .covidvar, .countycol = .countycol)
}
?assign
subplots_keyvars <- function(countydf, varevals = c(~ covid_cases_per_100k, ~ covid_hospital_admissions_per_100k, ~ covid_hospital_admissions_per_100k), subtitles = c("COVID cases\nper 100k", "Percent of beds\nfilled by\nCOVID patients", "COVID hospital\nadmits per\n100k"), basechngs = c("chng_covid", "chng_inpatient", "chng_hospadmit"), countyfilt= NULL, subrows = 3, .covidvar = covid_cases_per_100k, .countycol = county){
funenviron <- environment()
plots <- purrr::pmap(varevals, subtitles, basechngs, seq_along(subtitles), function(var, sub, chng, pos){
cdccovidplotting::plot_commlevels_lines(countydf = countydf, vareval = var, subtitle = sub, basechng = chng, countyfilt = countyfilt, .covidvar = .covidvar, .countycol = .countycol)
})
plotly::subplot(plots, nrows = subrows, shareX = T, shareY = F)
# assign(x = paste0(graph, pos),value =  cdccovidplotting::plot_commlevels_lines(countydf = countydf, vareval = var, subtitle = sub, basechng = chng, countyfilt = countyfilt, .covidvar = .covidvar, .countycol = .countycol), envir = funenviron)
}
environment()check()
devtools::check()
library(devtools)
usethis::use_package()
check()
check()
check()
check()
check()
check()
check()
check()
test_pull <- function(pullvar){
mtcars %>%
pull({{pullvar}})
}
test_pull <- function(pullvar){
mtcars %>%
dplyr::pull({{pullvar}})
}
test_pull(pullvar = mpg)
plot_commlevels_lines <- function(countydf, vareval, subtitle, basechng, countyfilt = NULL, .covidvar = covid_cases_per_100k, .countycol = county){
if (!is.null(countyfilt)){
countydf <- countydf %>%
dplyr::filter(grepl(countyfilt, {{.countycol}}, ignore.case = T))
}
if (nrow(countydf) == 0 | length(dplyr::pull(countydf, {{.countycol}}) %>% unique()) != 1){
stop("More or less than 1 county column present in countydf after countyfilt applied")
}
cdccovidplotting::plot_commlevels(countydf = countydf, vareval = vareval, subtitle = subtitle, basechng = basechng) %>%
cdccovidplotting::lines_approp(varstring = gsub("~", "", dplyr::as_label(dplyr::quo(!!vareval))), countydf = countydf, .covidvar = {{.covidvar}}, .countycol = {{.countycol}})
}
check()
devtools::check()
devtools::check()
devtools::document()
